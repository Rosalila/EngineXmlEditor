/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rosalilaenginexmleditor;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;
import nu.xom.ParsingException;
import nu.xom.ValidityException;

/**
 *
 * @author Oscar Rene Flores Presidente
 */
public class MainWindow extends javax.swing.JFrame {

    private File mCharacterDirectory;
    private JMenuBar mMenuBar;
    private SpritesFile mSpritesFile;
    private MovesTreeModel mAnimationModel;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        init();
    }

    private void init() {
        mMenuBar = new JMenuBar();
        JMenu menu;
        JMenuItem menuItem = new JMenuItem();

        //Build the first menu.
        menu = new JMenu("File");
        menu.setMnemonic(KeyEvent.VK_F);
        menuItem = new JMenuItem("New",KeyEvent.VK_N);
        menuItem.addActionListener(new OnNewProjectActionListener());
        menu.add(menuItem);
        
        menuItem = new JMenuItem("Open",KeyEvent.VK_O);
        menuItem.addActionListener(new OnOpenProjectActionListener());
        menu.add(menuItem);
        mMenuBar.add(menu);
        
        this.setJMenuBar(mMenuBar);


        mSpritesFile = new SpritesFile("/home/oscarr/AnimeFestFighter/chars/Evilken/sprites.xml");
        mAnimationModel = new MovesTreeModel(mSpritesFile);
        mAnimationTree.setModel(mAnimationModel);
        mAnimationTree.addTreeSelectionListener(new MovesTreeSelectionListener());

        mAnimationTree.setBorder(BorderFactory.createTitledBorder("Animations"));
        mSpriteOptionsContainer.setBorder(BorderFactory.createTitledBorder("Sprites"));
        mPreviewPane.setBorder(BorderFactory.createTitledBorder("Preview"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mMainTabbedPane = new javax.swing.JTabbedPane();
        mCharacterSpritesEditorPane = new javax.swing.JPanel();
        mPreviewPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mAnimationTree = new javax.swing.JTree();
        mAddAnimationButton = new javax.swing.JButton();
        mRemoveAnimationButton = new javax.swing.JButton();
        mSpriteOptionsContainer = new javax.swing.JPanel();
        mAddSpriteButton = new javax.swing.JButton();
        mMoveUpSpriteButton = new javax.swing.JButton();
        mRemoveSpriteButton = new javax.swing.JButton();
        mMoveDownSpriteButton = new javax.swing.JButton();
        mSpritePathLabel = new javax.swing.JLabel();
        mSpritePathTextbox = new javax.swing.JTextField();
        mFindSpriteButton = new javax.swing.JButton();
        mScaleSpriteSlider = new FloatSlider();
        mScaleSpriteLabel = new javax.swing.JLabel();
        mAlignSpriteXLabel = new javax.swing.JLabel();
        mSpriteAlignXSpinner = new javax.swing.JSpinner();
        mAlignSpriteYLabel = new javax.swing.JLabel();
        mSpriteAlignYSpinner = new javax.swing.JSpinner();
        mSpriteToOponnentCheckbox = new javax.swing.JCheckBox();
        mVariableNameLabel = new javax.swing.JLabel();
        mVariableNameCombo = new javax.swing.JComboBox();
        mSoundFxEditorPane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mPreviewPane.setPreferredSize(new java.awt.Dimension(360, 360));

        javax.swing.GroupLayout mPreviewPaneLayout = new javax.swing.GroupLayout(mPreviewPane);
        mPreviewPane.setLayout(mPreviewPaneLayout);
        mPreviewPaneLayout.setHorizontalGroup(
            mPreviewPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        mPreviewPaneLayout.setVerticalGroup(
            mPreviewPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(mAnimationTree);

        mAddAnimationButton.setText("Add Animation");
        mAddAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddAnimationButtonActionPerformed(evt);
            }
        });

        mRemoveAnimationButton.setText("Remove Animation");

        mAddSpriteButton.setText("Add");
        mAddSpriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddSpriteButtonActionPerformed(evt);
            }
        });

        mMoveUpSpriteButton.setText("Move Up");

        mRemoveSpriteButton.setText("Remove");

        mMoveDownSpriteButton.setText("Move Down");

        mSpritePathLabel.setText("Path");

        mFindSpriteButton.setText("...");

        mScaleSpriteLabel.setText("Scale");

        mAlignSpriteXLabel.setText("X");

        mAlignSpriteYLabel.setText("Y");

        mSpriteToOponnentCheckbox.setText("To Oponnent");

        mVariableNameLabel.setText("Variable");

        mVariableNameCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout mSpriteOptionsContainerLayout = new javax.swing.GroupLayout(mSpriteOptionsContainer);
        mSpriteOptionsContainer.setLayout(mSpriteOptionsContainerLayout);
        mSpriteOptionsContainerLayout.setHorizontalGroup(
            mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mSpriteOptionsContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mMoveDownSpriteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mRemoveSpriteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mAddSpriteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mMoveUpSpriteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mSpritePathLabel)
                    .addComponent(mScaleSpriteLabel)
                    .addComponent(mAlignSpriteXLabel)
                    .addComponent(mVariableNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mScaleSpriteSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mSpriteOptionsContainerLayout.createSequentialGroup()
                        .addComponent(mSpritePathTextbox)
                        .addGap(18, 18, 18)
                        .addComponent(mFindSpriteButton))
                    .addGroup(mSpriteOptionsContainerLayout.createSequentialGroup()
                        .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(mVariableNameCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(mSpriteOptionsContainerLayout.createSequentialGroup()
                                .addComponent(mSpriteAlignXSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(mAlignSpriteYLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mSpriteAlignYSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(mSpriteToOponnentCheckbox)
                        .addGap(0, 73, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mSpriteOptionsContainerLayout.setVerticalGroup(
            mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mSpriteOptionsContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mMoveUpSpriteButton)
                    .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mSpritePathLabel)
                        .addComponent(mSpritePathTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mFindSpriteButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mSpriteOptionsContainerLayout.createSequentialGroup()
                        .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mScaleSpriteLabel)
                            .addComponent(mAddSpriteButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mRemoveSpriteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mMoveDownSpriteButton))
                    .addGroup(mSpriteOptionsContainerLayout.createSequentialGroup()
                        .addComponent(mScaleSpriteSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mAlignSpriteXLabel)
                            .addComponent(mSpriteAlignXSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mAlignSpriteYLabel)
                            .addComponent(mSpriteAlignYSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mSpriteToOponnentCheckbox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mSpriteOptionsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mVariableNameLabel)
                            .addComponent(mVariableNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mCharacterSpritesEditorPaneLayout = new javax.swing.GroupLayout(mCharacterSpritesEditorPane);
        mCharacterSpritesEditorPane.setLayout(mCharacterSpritesEditorPaneLayout);
        mCharacterSpritesEditorPaneLayout.setHorizontalGroup(
            mCharacterSpritesEditorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mCharacterSpritesEditorPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mCharacterSpritesEditorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(mRemoveAnimationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mAddAnimationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(mCharacterSpritesEditorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mPreviewPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mSpriteOptionsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        mCharacterSpritesEditorPaneLayout.setVerticalGroup(
            mCharacterSpritesEditorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mCharacterSpritesEditorPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mCharacterSpritesEditorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(mCharacterSpritesEditorPaneLayout.createSequentialGroup()
                        .addComponent(mSpriteOptionsContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(mPreviewPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mCharacterSpritesEditorPaneLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mAddAnimationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mRemoveAnimationButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mMainTabbedPane.addTab("Sprites", mCharacterSpritesEditorPane);

        javax.swing.GroupLayout mSoundFxEditorPaneLayout = new javax.swing.GroupLayout(mSoundFxEditorPane);
        mSoundFxEditorPane.setLayout(mSoundFxEditorPaneLayout);
        mSoundFxEditorPaneLayout.setHorizontalGroup(
            mSoundFxEditorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 846, Short.MAX_VALUE)
        );
        mSoundFxEditorPaneLayout.setVerticalGroup(
            mSoundFxEditorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
        );

        mMainTabbedPane.addTab("Sound Fx", mSoundFxEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mMainTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mMainTabbedPane))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mAddSpriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAddSpriteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mAddSpriteButtonActionPerformed

    private void mAddAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAddAnimationButtonActionPerformed
        try {
            mSpritesFile.readFromFile();
        } catch (ParsingException | IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        mAnimationModel.reload();
    }//GEN-LAST:event_mAddAnimationButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mAddAnimationButton;
    private javax.swing.JButton mAddSpriteButton;
    private javax.swing.JLabel mAlignSpriteXLabel;
    private javax.swing.JLabel mAlignSpriteYLabel;
    private javax.swing.JTree mAnimationTree;
    private javax.swing.JPanel mCharacterSpritesEditorPane;
    private javax.swing.JButton mFindSpriteButton;
    private javax.swing.JTabbedPane mMainTabbedPane;
    private javax.swing.JButton mMoveDownSpriteButton;
    private javax.swing.JButton mMoveUpSpriteButton;
    private javax.swing.JPanel mPreviewPane;
    private javax.swing.JButton mRemoveAnimationButton;
    private javax.swing.JButton mRemoveSpriteButton;
    private javax.swing.JLabel mScaleSpriteLabel;
    private javax.swing.JSlider mScaleSpriteSlider;
    private javax.swing.JPanel mSoundFxEditorPane;
    private javax.swing.JSpinner mSpriteAlignXSpinner;
    private javax.swing.JSpinner mSpriteAlignYSpinner;
    private javax.swing.JPanel mSpriteOptionsContainer;
    private javax.swing.JLabel mSpritePathLabel;
    private javax.swing.JTextField mSpritePathTextbox;
    private javax.swing.JCheckBox mSpriteToOponnentCheckbox;
    private javax.swing.JComboBox mVariableNameCombo;
    private javax.swing.JLabel mVariableNameLabel;
    // End of variables declaration//GEN-END:variables

    private class MovesTreeSelectionListener
        implements TreeSelectionListener {

        @Override
        public void valueChanged(TreeSelectionEvent e) {
            Object node = e.getNewLeadSelectionPath().getLastPathComponent();
            if (node == null) {
                return;
            }

            if (node.getClass() == MoveElement.class) {
            } else if (node.getClass() == SpriteElement.class) {
                SpriteElement s = (SpriteElement) node;
                mSpritePathTextbox.setText(s.getImagePath());
                ((FloatSlider) mScaleSpriteSlider).setFloatValue(s.getScale());
                mSpriteAlignXSpinner.setValue(s.getAlignX());
                mSpriteAlignYSpinner.setValue(s.getAlignY());
                mSpriteToOponnentCheckbox.setSelected(s.affectsOponent());
                mVariableNameCombo.setSelectedItem(s.getVariableName());
            }
        }
    }
    
    private class OnNewProjectActionListener
        implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
        
    }
    
    private class OnOpenProjectActionListener 
        implements ActionListener {

        private final static String CHAR_AI_PATH_1 = "/ai/ai.xml";
        private final static String CHAR_AI_PATH_2 = "/ai/default.xml";
        private final static String CHAR_HITBOXES_PATH = "/hitboxes.xml";
        private final static String CHAR_INPUT_PATH = "/input.xml";
        private final static String CHAR_MAIN_PATH = "/main.xml";
        private final static String CHAR_PALETTES_PATH = "/palettes.xml";
        private final static String CHAR_SFX_PATH = "/sfx.xml";
        private final static String CHAR_SPRITES_PATH = "/sprites.xml";
        private final static String CHAR_TRIGGERS_PATH = "/triggers.xml";
        private final static String CHAR_VARS_PATH = "/vars.xml";
        private final static String CHAR_VFX_PATH = "/vfx.xml";
        
        
        @Override
        public void actionPerformed(ActionEvent e) {
            final JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnValue = fc.showOpenDialog(MainWindow.this);
            
            File characterDirectory;

            if ( returnValue == JFileChooser.APPROVE_OPTION ) {
                characterDirectory = fc.getSelectedFile();
                
                //Check if the folder contains the needed xml
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_AI_PATH_1) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_AI_PATH_2) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_HITBOXES_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_INPUT_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_MAIN_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_PALETTES_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_SFX_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_SPRITES_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_TRIGGERS_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_VARS_PATH) )return;
                if ( !checkAndShowMessage(characterDirectory.getAbsolutePath()+CHAR_VFX_PATH) )return;                 
                
                
            }
        }
        
        private boolean checkAndShowMessage(String path) {
            File f = new File(path);
            boolean exists = f.exists();        
            String message;
            if (!exists) {
                message = "File " + path + " doesn't exists.";
                JOptionPane.showMessageDialog(MainWindow.this,message, "Missing file", JOptionPane.OK_OPTION);
            }
                
            return exists;
        }
        
    }
}
